---
title: "How to Trigger or Simulate Bad Blocks on Ntfs Drive"
date: 2023-12-03T19:02:59-08:00
draft: true
---
* Why you'd want this
https://github.com/jamersonpro/ntfsmarkbad

#+begin_src powershell
mkdir BadBlocktest
cd BadBlockTest
Invoke-WebRequest -Uri "https://github.com/jamersonpro/ntfsmarkbad/releases/download/v0.0.2/NtfsMarkBad.exe" -Outfile "NtfsMarkBad.exe" -UseBasicParsing
New-VHD -Path "BadBlocks.vhd" -Fixed -SizeBytes 10MB
Mount-VHD .\BadBlocks.vhd
#+end_src

Now open DiskMGMT.msc. The first prompt will be to format the
drive. Select GPT and format the device using NTFS with the default
settings.

Now use NtfsMarkbad.exe with the drive letter of the mounted VHD. You
can scan over the output to read more into the structure of the
volume. For this use case, copy "First Volume Sector" value and leave
it at that.

#+begin_src powershell
./NtfsMarkbad.exe G:

Output:
NTFSMARKBAD 0.0.2 x64     https://github.com/jamersonpro/ntfsmarkbad

Scanning volume...
First volume sector: 128 **MAKE NOTE OF THIS**
Last volume sector: 16511
Bytes per sector: 512
Sectors per cluster: 8
Total cluster count: 2047
Completed.
#+end_src

These commands will create a file slightly larger than 1MB
in size. Files less than this will get stored directly in the MFT
Table instead of on sectors of the FS

#+begin_src powershell
fsutil.exe file createnew G:\file.txt 1048576
fsutil.exe file queryextents G:\file.txt

Output: VCN: 0x0        Clusters: 0x100      LCN: 0x5c0
#+end_src

The NtfsMarkBad.exe software requires a range of sectors to mark as bad. Using the data from ~query extents~, we'll

#+begin_src powershell
  $SectorsPerCluster=8
  $FirstVolumeSector=1000
  $VCN=[uint32]"0x0"        # Change this
  $CLUSTERS=[uint32]"0x100" # Change this
  $LCN=[uint32]"0x5c0"      # Change this

  $LCN = ($VCN + $LCN)
  $StartingSector = (($LCN * $SectorsPerCluster) + $FirstVolumeSector)
  $EndingSector = ((($LCN + $CLUSTERS -1) * $SectorsPerCluster) + $FirstVolumeSector)

  ./NtfsMarkBad.exe G: $StartingSector $EndingSector
#+end_src


#+begin_src powershell
Dismount-VHD -Path .\BadBlocks.vhd
#+end_src

PS C:\Users\Peter\Downloads>   ./NtfsMarkBad.exe G: $StartingSector $EndingSector
NTFSMARKBAD 0.0.2 x64     https://github.com/jamersonpro/ntfsmarkbad

Scanning volume...
First volume sector: 128
Last volume sector: 16511
Bytes per sector: 512
Sectors per cluster: 8
Total cluster count: 2047
The number of clusters skipped since they already marked bad: 0
The number of clusters skipped since they are in use: 131
The number of selected clusters: 0
No clusters to add to the Bad Clusters File.
Completed.

** Completeing
#+begin_src powershell
PS C:\Users\Peter\BadBlocksTest> chkdsk /f G:
The type of the file system is NTFS.

Chkdsk cannot run because the volume is in use by another
process.  Chkdsk may run if this volume is dismounted first.
ALL OPENED HANDLES TO THIS VOLUME WOULD THEN BE INVALID.
Would you like to force a dismount on this volume? (Y/N)
#+end_src
